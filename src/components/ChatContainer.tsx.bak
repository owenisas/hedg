"use client";

import { useState, useRef, useEffect } from "react";
import NetworkGraph from "./NetworkGraph";

interface ChatContainerProps {
  showCanvas: boolean;
  setShowCanvas: (show: boolean) => void;
}

// Helper function to get metric descriptions
function getMetricDescription(metricId: string): string {
  const descriptions: Record<string, string> = {
    'volatility': 'Measures the degree of variation in hedge performance over time. Higher volatility indicates greater uncertainty and risk in the portfolio.',
    'exposure': 'Total risk exposure across all hedge positions. Represents the aggregate amount at risk in your portfolio.',
    'sharpe-ratio': 'Risk-adjusted return metric that measures returns per unit of risk. Higher Sharpe ratios indicate better risk-adjusted performance.',
    'max-drawdown': 'Maximum observed loss from a peak to a trough. Represents the worst-case historical loss scenario.',
    'beta': 'Market correlation coefficient measuring systematic risk. Beta > 1 indicates higher volatility than the market.',
    'var': 'Value at Risk at 95% confidence level. The maximum expected loss under normal market conditions.',
    'risk-score': 'Composite risk assessment aggregating multiple risk factors into a single score.',
    'correlation': 'Measures the statistical relationship between different assets in the portfolio.',
    'duration': 'Time-based risk measure indicating sensitivity to interest rate changes.',
    'hedge-ratio': 'Optimal position sizing for hedging. Determines the effectiveness of your hedge.',
    'liquidity': 'Ability to quickly exit positions without significant price impact.',
    'cost-basis': 'Initial investment cost serving as the baseline for profit and loss calculations.'
  };
  
  return descriptions[metricId] || 'Financial metric for risk analysis and portfolio management.';
}

export default function ChatContainer({ showCanvas, setShowCanvas }: ChatContainerProps) {
  const [inputValue, setInputValue] = useState("");
  const [selectedNode, setSelectedNode] = useState<{ id: string; label: string; type: string } | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (inputValue.trim()) {
      setInputValue("");
      setShowCanvas(true);
    }
  };

  const handleInput = () => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 200)}px`;
    }
  };

  // Focus textarea on initial render
  useEffect(() => {
    if (textareaRef.current && !showCanvas) {
      textareaRef.current.focus();
    }
  }, [showCanvas]);

  return (
    <div className="chat-container">
      {!showCanvas ? (
        <>
          <div className="welcome-section">
            <h1 className="welcome-title">Welcome back, John!</h1>
            <p className="welcome-subtitle">How can I help you create a hedge today?</p>
          </div>
          <div className="chat-input-section">
            <form className="chat-form" onSubmit={handleSubmit}>
              <div className="chat-input-container">
                <textarea 
                  ref={textareaRef}
                  value={inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    handleInput();
                  }}
                  onInput={handleInput}
                  placeholder="How can I help you today?" 
                  className="chat-input" 
                  rows={1}
                />
              </div>
              <button 
                type="submit" 
                className="send-button" 
                disabled={!inputValue.trim()}
              >
                <svg 
                  width="18" 
                  height="18" 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor" 
                  strokeWidth="2.5" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                >
                  <path d="M12 19V5M5 12l7-7 7 7"></path>
                </svg>
              </button>
            </form>
            <div className="example-prompts">
              <div className="prompts-row">
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("Help me hedge against electronics trade risks")}
                >
                  Electronics Trade
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("How can I protect agricultural exports?")}
                >
                  Agricultural Exports
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("What's the best way to hedge pharmaceuticals?")}
                >
                  Pharmaceuticals
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("I need protection for automotive parts")}
                >
                  Automotive Parts
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("How to hedge seafood exports?")}
                >
                  Seafood Exports
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("Natural gas price protection")}
                >
                  Natural Gas
                </button>
                <button 
                  className="prompt-tag" 
                  onClick={() => setInputValue("Luxury goods market hedging")}
                >
                  Luxury Goods
                </button>
              </div>
            </div>
          </div>
        </>
      ) : (
        <div style={{ 
          position: "fixed",
          top: 0,
          left: "280px",
          right: 0,
          bottom: 0,
          width: "calc(100% - 280px)",
          height: "100vh",
          zIndex: 5
        }}>
          <NetworkGraph onNodeClick={(node) => setSelectedNode(node)} />

          {selectedNode && (
            <div
              style={{
                position: "fixed",
                top: 20,
                right: 20,
                width: 350,
                maxHeight: "90vh",
                padding: "24px",
                background: "linear-gradient(135deg, rgba(26, 26, 26, 0.95), rgba(20, 20, 20, 0.95))",
                border: "1px solid #6366f133",
                borderRadius: "16px",
                color: "#fff",
                backdropFilter: "blur(20px)",
                boxShadow: "0 8px 32px rgba(0, 0, 0, 0.4)",
                overflowY: "auto",
                zIndex: 1000
              }}
            >
              <button
                onClick={() => setSelectedNode(null)}
                style={{
                  position: "absolute",
                  top: "16px",
                  right: "16px",
                  background: "rgba(99, 102, 241, 0.2)",
                  border: "1px solid #6366f166",
                  color: "#fff",
                  width: "32px",
                  height: "32px",
                  borderRadius: "50%",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  cursor: "pointer",
                  fontSize: "18px",
                  fontWeight: 700,
                  transition: "all 0.2s"
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = "rgba(99, 102, 241, 0.4)";
                  e.currentTarget.style.borderColor = "#6366f1";
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = "rgba(99, 102, 241, 0.2)";
                  e.currentTarget.style.borderColor = "#6366f166";
                }}
              >
                ×
              </button>
              <h3 style={{ 
                marginBottom: "16px", 
                marginRight: "32px",
                color: "#6366f1",
                fontSize: "20px",
                fontWeight: 700
              }}>
                {selectedNode.label}
              </h3>
              
              {/* Node type badge */}
              <div style={{
                display: "inline-block",
                background: selectedNode.type === 'central' ? "rgba(255, 255, 255, 0.2)" : "rgba(139, 92, 246, 0.3)",
                border: `1px solid ${selectedNode.type === 'central' ? "#ffffff66" : "#8b5cf666"}`,
                borderRadius: "8px",
                padding: "6px 12px",
                fontSize: "12px",
                marginBottom: "20px",
                fontWeight: 600,
                textTransform: "capitalize"
              }}>
                {selectedNode.type === 'central' ? 'Central Metric' : 'Risk Metric'}
              </div>
              
              {/* Description based on metric type */}
              <div style={{marginBottom: "16px"}}>
                <div style={{
                  color: "#9ca3af", 
                  fontSize: "14px",
                  marginBottom: "6px",
                  fontWeight: 600
                }}>
                  Description
                </div>
                <div style={{ 
                  color: "#e5e7eb", 
                  fontSize: "14px",
                  lineHeight: "1.5",
                  padding: "12px",
                  background: "rgba(0, 0, 0, 0.2)",
                  borderRadius: "8px",
                  border: "1px solid rgba(255, 255, 255, 0.05)"
                }}>
                  {getMetricDescription(selectedNode.id)}
                </div>
              </div>
              
              {/* Importance indicator */}
              <div style={{
                marginBottom: "16px"
              }}>
                <div style={{
                  display: "flex",
                  justifyContent: "space-between",
                  marginBottom: "6px"
                }}>
                  <div style={{color: "#9ca3af", fontSize: "14px"}}>Importance</div>
                  <div style={{fontWeight: 600, color: "#6366f1"}}>
                    {selectedNode.type === 'central' ? 'High' : 'Medium'}
                  </div>
                </div>
                <div style={{
                  height: "6px",
                  background: "rgba(255, 255, 255, 0.1)",
                  borderRadius: "3px",
                  overflow: "hidden"
                }}>
                  <div style={{
                    height: "100%",
                    width: selectedNode.type === 'central' ? '90%' : '70%',
                    background: "linear-gradient(90deg, #6366f1, #8b5cf6)",
                    borderRadius: "3px"
                  }}></div>
                </div>
              </div>
            </div>
          )}

          <button
            onClick={() => setShowCanvas(false)}
            style={{
              position: "fixed",
              bottom: 24,
              left: "calc(280px + 24px)",
              background: "linear-gradient(135deg, #6366f1, #8b5cf6)",
              color: "#fff",
              border: "none",
              padding: "12px 24px",
              borderRadius: "12px",
              cursor: "pointer",
              fontWeight: 600,
              fontSize: "14px",
              boxShadow: "0 4px 16px rgba(99, 102, 241, 0.4)",
              transition: "all 0.3s",
              zIndex: 1000
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.boxShadow = "0 6px 24px rgba(99, 102, 241, 0.6)";
              e.currentTarget.style.transform = "translateY(-2px)";
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.boxShadow = "0 4px 16px rgba(99, 102, 241, 0.4)";
              e.currentTarget.style.transform = "translateY(0)";
            }}
          >
            ← Back to Chat
          </button>
        </div>
      )}
    </div>
  );
}

            ← Back to Chat
          </button>
          
          {/* Basket Summary Panel */}
          <div
            style={{
              position: "fixed",
              bottom: 24,
              right: 24,
              width: 300,
              maxHeight: "400px",
              padding: "20px",
              background: "linear-gradient(135deg, rgba(26, 26, 26, 0.95), rgba(20, 20, 20, 0.95))",
              border: "1px solid #6366f133",
              borderRadius: "16px",
              color: "#fff",
              backdropFilter: "blur(20px)",
              boxShadow: "0 8px 32px rgba(99, 102, 241, 0.2), inset 0 1px rgba(255, 255, 255, 0.1)",
              overflowY: "auto",
              zIndex: 10
            }}
          >
            <h3 style={{ 
              marginBottom: "16px", 
              color: "#6366f1",
              fontSize: "18px",
              fontWeight: 700
            }}>
              Hedge Basket
            </h3>
            
            {/* Selected nodes */}
            <div style={{marginBottom: "20px"}}>
              {nodes.filter(n => n.id !== 'center' && (n.data as NodeData).isSelected).length === 0 ? (
                <div style={{
                  textAlign: "center",
                  padding: "20px",
                  color: "#9ca3af",
                  fontStyle: "italic"
                }}>
                  No nodes selected. Click on nodes and toggle "Include in Basket" to build your hedge.
                </div>
              ) : (
                <>
                  {nodes
                    .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                    .map(node => (
                      <div 
                        key={node.id}
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                          padding: "12px",
                          marginBottom: "10px",
                          background: "rgba(99, 102, 241, 0.1)",
                          borderRadius: "10px",
                          border: "1px solid rgba(99, 102, 241, 0.2)"
                        }}
                      >
                        <div style={{fontSize: "14px", maxWidth: "70%"}}>
                          {(node.data as NodeData).label}
                        </div>
                        <div style={{
                          fontWeight: 600,
                          color: "#6366f1"
                        }}>
                          {((node.data as NodeData).weight || 0)}%
                        </div>
                      </div>
                    ))
                  }
                  
                  {/* Total weight */}
                  <div style={{
                    display: "flex",
                    justifyContent: "space-between",
                    padding: "12px",
                    background: "rgba(0, 0, 0, 0.3)",
                    borderRadius: "10px",
                    fontWeight: 600,
                    borderTop: "1px solid rgba(255, 255, 255, 0.1)"
                  }}>
                    <div>Total Weight</div>
                    <div>
                      {nodes
                        .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                        .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0)
                      }%
                    </div>
                  </div>
                  
                  {/* Budget allocation */}
                  <div style={{
                    marginTop: "15px",
                    padding: "15px",
                    background: "linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(79, 70, 229, 0.2))",
                    borderRadius: "12px",
                    textAlign: "center"
                  }}>
                    <div style={{marginBottom: "8px", fontWeight: 600}}>
                      Budget Allocation ($600 total)
                    </div>
                    {nodes
                      .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                      .map(node => {
                        const weight = (node.data as NodeData).weight || 0;
                        const amount = (weight / 100) * 600;
                        return (
                          <div 
                            key={node.id}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              fontSize: "14px",
                              marginBottom: "6px"
                            }}
                          >
                            <div>{(node.data as NodeData).label.substring(0, 20)}...</div>
                            <div>${amount.toFixed(0)}</div>
                          </div>
                        );
                      })
                    }
                    <div style={{
                      display: "flex",
                      justifyContent: "space-between",
                      fontWeight: 700,
                      borderTop: "1px solid rgba(255, 255, 255, 0.2)",
                      paddingTop: "8px",
                      marginTop: "8px"
                    }}>
                      <div>Total</div>
                      <div>
                        ${nodes
                          .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                          .reduce((sum, node) => {
                            const weight = (node.data as NodeData).weight || 0;
                            return sum + (weight / 100) * 600;
                          }, 0)
                          .toFixed(0)
                        }
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
            
            {/* Execute button */}
            <button
              disabled={
                nodes.filter(n => n.id !== 'center' && (n.data as NodeData).isSelected).length === 0 ||
                nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) !== 100
              }
              style={{
                width: "100%",
                padding: "14px",
                background: nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100
                  ? "linear-gradient(135deg, #10b981, #059669)"
                  : "rgba(255, 255, 255, 0.1)",
                border: "none",
                borderRadius: "10px",
                color: nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100
                  ? "#fff"
                  : "#9ca3af",
                cursor: nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100
                  ? "pointer"
                  : "not-allowed",
                fontWeight: 600,
                fontSize: "16px",
                transition: "all 0.2s",
                boxShadow: nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100
                  ? "0 4px 16px rgba(16, 185, 129, 0.4)"
                  : "none"
              }}
              onMouseEnter={(e) => {
                if (nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100) {
                  e.currentTarget.style.transform = "translateY(-2px)";
                  e.currentTarget.style.boxShadow = "0 6px 20px rgba(16, 185, 129, 0.5)";
                }
              }}
              onMouseLeave={(e) => {
                if (nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100) {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow = "0 4px 16px rgba(16, 185, 129, 0.4)";
                }
              }}
              onClick={() => {
                if (nodes
                  .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                  .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100) {
                  alert("Hedge executed successfully! Your positions have been created.");
                }
              }}
            >
              {nodes
                .filter(n => n.id !== 'center' && (n.data as NodeData).isSelected)
                .reduce((sum, node) => sum + ((node.data as NodeData).weight || 0), 0) === 100
                ? "Execute Hedge"
                : "Allocate 100% to Enable"}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}